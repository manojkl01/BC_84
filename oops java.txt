OOPS concepts:
1)  package com.thbs;

public class car {
    String name, fuel_type;
     int speed, cc;

    car(String name, String fuel_type, int speed, int cc) {
        this.name = name;
        this.fuel_type = fuel_type;
        this.speed = speed;
        this.cc = cc;
    }

    @Override
    public String toString() {
        return "car{" +
                "name='" + name + '\'' +
                ", fuel_type='" + fuel_type + '\'' +
                ", speed=" + speed +
                ", cc=" + cc +
                '}';
    }

    public String get_car_name(){
        return "name: "+name+"\n"+"fuel type: "+fuel_type+"\n"+"speed: "
                +speed+"\n cc: "+cc;
    }

    public void set_car(String name, String fuel_type, int speed, int cc){
        this.name=name;
        this.fuel_type=fuel_type;
        this.speed=speed;
        this.cc=cc;
    }



}
public class Main {

    public static void main(String[] args) {
	// write your code here

        car c = new car("lamborghini","petrol",350,6000);
        System.out.println(c.get_car_name());
        c.set_car("ferrari","petrol",428, 7993);
        System.out.println(c.get_car_name());
        System.out.println(c.name);
}
}
OUTPUT:   
name: lamborghini
fuel type: petrol
speed: 350
 cc: 6000
name: ferrari
fuel type: petrol
speed: 428
 cc: 7993
ferrari



2)    Abstraction:
i)By abstract class:

public abstract class Employees {
    protected int emp_id;
    protected String name;
    protected int salary;

    public abstract int getSalary();

    public Employees(int emp_id, String name, int salary) {
        this.emp_id = emp_id;
        this.name = name;
        this.salary = salary;

    }
    public void run(){
        System.out.println("This is inside abstract class");
    }
}
public class developer extends Employees {
    private String dept, deptno;
    private int Salary;

    public developer(int emp_id, String name, String dept, String deptno, int salary) {
        super(emp_id, name,salary);
        this.dept = dept;
        this.deptno = deptno;
        this.Salary = salary;
    }

    public String getDetails(){
        return emp_id+" "+name+" "+dept+" "+deptno+" "+salary;
    }

    public int getSalary(){
        Salary+=12000;
        return Salary;
}
}
public class Main{
public static void main(String args[]){
 Employees E1= (Employees) new developer(111, "Manoj", "Back end",
                "be_021", 35000);
        System.out.println(((developer) E1).getDetails()+" ,for developers sal= "+ ((developer) E1).getSalary());
        ((developer) E1).run());
}
}
OUTPUT:   111 Manoj Back end be_021 35000 ,for developers sal= 47000
This is inside abstract class

ii) by interface:

public interface intface1 {

    public int a=100;

    void display1();
    void display2();

}
public interface intface3 {
    public int j=50;
}
public interface inface2 extends intface1, intface3{
    public int b=10;

    @Override
    default void display1() {
        System.out.println(a);
    }

    @Override
    default void display2() {
        System.out.println(j);
    }
}
public class demoClass implements inface2{

    @Override
    public void display1() {
//        inface2.super.display1();
        System.out.println("interface1: "+inface2.a);
    }

    @Override
    public void display2() {
        System.out.println("interface2:"+inface2.b+"\n"+inface2.b);
    }
}
public class Main{
public static void main(String args[]){
demoClass cd=new demoClass();
        cd.display1();
        cd.display2();
        System.out.println(cd.a);}
}
OUTPUT:   
interface1: 100
interface2:10
10
100

3) inheritence:
public class Car {//base class
    protected String fuel_type;
    protected int year;

    public Car(String fuel_type, int year) {
        this.fuel_type = fuel_type;
        this.year = year;
    }


    public String getinfo() {
        return "fuel type: "+fuel_type+" invented in: "+year;
    }

}

public class Bugatti extends Car{
    private String name, fuel_type;
    private int cc;

    public Bugatti(String name, String fuel_type, int cc, int year) {
        super(fuel_type, year);
        this.name = name;
        this.fuel_type = fuel_type;
        this.cc = cc;
    }

    public String getinfo(){
        return "Car name: "+name+", its fuel type: "+fuel_type+", "+cc+" in the year "+year;
    }
    public int getYear(){
        return year;
    }

    public String getName() {
        return name;
    }

    public String getFuel_type() {
        return fuel_type;
    }

    public int getCc() {
        return cc;
    }
}

public class Main{

    public static <Employees> void main(String[] args) {
	// write your code here
        Car c1=new Car("Petrol/Diesel",1886);
        Car b1=new Bugatti("Bugatti Veyron", "Petrol",7993, 2011);
        System.out.println(c1.getinfo());
        System.out.println(b1.getinfo());
        Bugatti bc1=(Bugatti) b1;
        System.out.println(bc1.getName());
}
}
OUTPUT:
fuel type: Petrol/Diesel invented in: 1886
Car name: Bugatti Veyron, its fuel type: Petrol, 7993 in the year 2011
Bugatti Veyron

4) polymorphism:
i) compile time polymorphism:
public class Summation {

    public int add(int x, int y){
        return x+y;
    }
    public double add(int x, float y, int z){
        return (x+y+z);
    }
    public double add(byte x, int y, float z, double a){
        return x+y+z;
    }
}

public class Tax {
    public double calc_tax(long amt, char status){
        return (float) (0.1*amt);
    }
    public double calc_tax(long amt){
        return (float) (0.1*amt);
    }

}
public double avg(int ...num){
        int sum=0;
        for(int i:num){
            sum+=i;
        }
        return(sum/num.length);
    }
    public double avg(int a,int b,float ...num){
        float sum=0f;
        for (float i:num){
            sum+=i;
        }
        return (a+b+sum)/(num.length+2);
    }

}
public class Main {

    public static void main(String[] args) {
	// write your code here
        Summation sum=new Summation();
        int sum1=sum.add(23,65);
        double sum2=sum.add(12,  56.33f, 21);
        double sum3=sum.add((byte) 12, 33, 11.12f, 10.33d);

        System.out.print(sum1+" "+sum2+" "+sum3);
        Tax t=new Tax();
        System.out.println(t.calc_tax(10000, 'd'));
        System.out.println(t.calc_tax(10000));

        Average a1=new Average();
        System.out.println(a1.avg(3,4,5,6,7,8));

    }
}
OUTPUT:    88 89.33 56.11
1000.0
5.0

ii)runtime polymorphism:
class Bike{  
  void start(){
System.out.println("running");
}  
}  
class Enfield extends Bike{  
  void run(){System.out.println("switched to gear1");}  
  
  public static void main(String args[]){  
    Bike b = new Enfield(); 
    b.run();  
  }  
}  
OUTPUT:
	switched to gear1


